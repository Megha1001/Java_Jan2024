Direct way to Find and compare growth
1. Ignore lower order terms
2. Ignore leading terms constants


How do we compare terms ?
c < log(logN) < logN < N^1/3 < N^1/2 < N < N^2 < N^3 < N^4 < 2^N < N^N

Best example
1. Find complexity of below code
for(int i = 2; i < n; i = Math.pow(i,c)){}
Complexity : log(logN)
inner base : 2, outer base : c

Methods
1. for normal/simple loops --> use direct approach by identifying which statement is executing most number of times
2. For recursive code -> write recurrance relation

Space complexity : Order of growth of RAM(memory) require in terms of input size
Auxilary space : Order of growth of extra space or temporary space in terms of input size

For Recursion question :- space complexity is = height of the tree


-----------------------------------------

Euclidiean algorithm
  Let 'b' be smaller than 'a'
    gcd(a,b) = gcd(a-b,b)

  Why ?
    Let 'g' be GCD of 'a' and 'b'
      a=gx, b=gx, and GCD(x,y) = 1
      (a-b) = g(x-y)
      Now we have to show that gcd((a-b), b) = g
      (a-b) = g(x-y) --> would not be having any more comman factor otherwise it'll contradict with GCD(x,y) = 1
      Hence, gcd((a-b), b) = g

2. LCM
  a*b = gcd(a,b) * lcm(a,b)


------------------

2's complement of representation is
    -x = 2^n - x, where n is number of bits
   - all ones are treated as 2^32 - 1;
Range in java for signed numbers = -2^n-1 to 2^n-1 -1



