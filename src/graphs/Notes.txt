GRAPHS : G(V,E)
---------------------
- Random connection among nodes


Types
---------------------
- Directed graph --> used by crawlers
    - indegree, outdegree
    - Sum of indegree : |E|
    - Sum of outdegree : |E|
    (Every edge contribute to one indegree and one outdegree)
    - Maximum number of edges : |V| * |V-1| [Maximum num of edges in undirected graph/2]
        When graph is completely connected , every vertex can connect to v-1 vertex. There are v vertex
- Undirected graph
    - Degree of vertex : Number of edges going through it.
    - Sum of degress : 2*|E| , (one edge contributes to 2 degree)
    - Maximum number of edges : (|v|*|V-1|)/2,

Note : Have not considered self loop


-----------------------------
TERMS
1. Walk(aka Path) : Sequence of vertices that we get by following edges in the graph
2. Path(aka Simple Path) : Special type of walk that doesn't allow repetations
3. Cyclic : There exists a walk that starts and ends with same vertex.
    - Directed
    - Undirected
4. Acyclic graph : That doesn't have any cycle
    - Directed Acyclic Graph (DAG) --> HAS MANY APPLICATIONS
        - Topological sorting --> used specially for this and used for job scheduling

5. Weighted graph : ex : road n/w(weight : length of roads), Routers
    - Directed
    - Undirected

-----------------------------
REPRESENTATIONS
Has many representations but two are most popular
- Adjacency list
- Adjacency matrix -> https://www.geeksforgeeks.org/adjacency-matrix-meaning-and-definition-in-dsa/


------------------------------
ADJACENCY MATRIX
------------------------------
- Size : |V| * |V|, where n is numbber of vertices

mat[i][j] = {1 if there is an edge from vertex i to vertex j, 0 otherwise}

For undirected graph : its a symmetric metric

How to handle vertics with arbitary names
- For efficient implementations one has table h would also be required to do reverse mapping


Properties of Adjacency Matrix

Space required : Θ(V*V)
Operations :
    - Check if u and v are adjacent : Θ(1);
    - Find all vertices adjacent to u : Θ(V);
    - Find degree of u : Θ(V);
    - Add/Remove an edge : Θ(1);
    - Add/Remove a vertex : Θ(V*V);
        -> for adding , need to make a matrix with 1 number bigger size and then copy the elements of original matrix to new one.
        Similarly needs to be done for removing a vertex



------------------------------
ADJACENCY LIST
------------------------------

Adjacency matrix store redundant information(like it stores which vertex are connected to it , it also stores which are not connected to it(that is redundant))

Adjacency list only stores the vertices that are adjacent to the vertex. (Not store the vertices which the vertex is not connected)

-> It makes finding the adjacent vertices operation fast.


Adjacency list is an array of list that list can be linked list, dynamic size array or other data structures

Most popular
    - Dynamic sized arrays -> cache friendly(faster code)
        disadvantages -> since it pre-allocates memory hence wastage of space, amortized O(1)


Space requirement : θ(V+E)[for directed graph], θ(V+2E)[for undirected graph]
Operations :
    - Check if there is an edge from u to v : O(V)
    - Find all adjacent to u : Θ(degree(u))
    - Find degree of u : Θ(1) (by size operations)
    - Add an edge : Θ(1) [maintain tail pointer in LL, and for arraylist its just an add operation(list.add(newElement)]
    - Remove an edge : O(V)

------------------------------------------------------------------------------------------
COMPARISION OF ADJACENCY LIST AND ADJACENCY MATRIX
------------------------------------------------------------------------------------------

                                            LIST                    Matrix
------------------------------------------------------------------------------------------
Memory                                      θ(V+E)                  θ(V*V)
Check if there is an edge from u to v       O(V)                    θ(1)
Find all adjacent of u                      θ(degree(u))            O(V)
Add an edge                                 θ(1)                    θ(1)
Remove an edge                              O(V)                    θ(1)
ADD/REMOVE                                  Less than O(V*V)        O(V*V)


Find all adjacent of u                      θ(degree(u))->   θ(outdegree(u))-> for directed graph --> THIS IS MOST COMMON IN MANY STANDARD ALGO LIKE BFS, DFS, DIJKSTRA'S, PRIM'S ETC
Remove an edge                              O(V)  -> UNDIRECTED -> O(2V)
MOST PREFERABLE : LIST

Undirected graph
0<=E<= v*(v-1)/2;

directed graph
0<=E<=v*(v-1)

A graph which is not complete and doesn't have edges close to the maximum are called Sparse graph (Use in most real world examples)
A graph which is not complete and have edges close to the maximum are called Dense graph


For above reason Adjacency list is preferable.
