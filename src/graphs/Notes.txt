GRAPHS : G(V,E)
---------------------
- Random connection among nodes


Types
---------------------
- Directed graph --> used by crawlers
    - indegree, outdegree
    - Sum of indegree : |E|
    - Sum of outdegree : |E|
    (Every edge contribute to one indegree and one outdegree)
    - Maximum number of edges : |V| * |V-1| [Maximum num of edges in undirected graph/2]
        When graph is completely connected , every vertex can connect to v-1 vertex. There are v vertex
- Undirected graph
    - Degree of vertex : Number of edges going through it.
    - Sum of degress : 2*|E| , (one edge contributes to 2 degree)
    - Maximum number of edges : (|v|*|V-1|)/2,

Note : Have not considered self loop


-----------------------------
TERMS
1. Walk(aka Path) : Sequence of vertices that we get by following edges in the graph
2. Path(aka Simple Path) : Special type of walk that doesn't allow repetations
3. Cyclic : There exists a walk that starts and ends with same vertex.
    - Directed
    - Undirected
4. Acyclic graph : That doesn't have any cycle
    - Directed Acyclic Graph (DAG) --> HAS MANY APPLICATIONS
        - Topological sorting --> used specially for this and used for job scheduling

5. Weighted graph : ex : road n/w(weight : length of roads), Routers
    - Directed
    - Undirected

-----------------------------
REPRESENTATIONS
Has many representations but two are most popular
- Adjacency list
- Adjacency matrix -> https://www.geeksforgeeks.org/adjacency-matrix-meaning-and-definition-in-dsa/
------------------------------

ADJACENCY MATRIX
------------------------------
- Size : |V| * |V|, where n is numbber of vertices

mat[i][j] = {1 if there is an edge from vertex i to vertex j, 0 otherwise}

For undirected graph : its a symmetric metric

How to handle vertics with arbitary names
- For efficient implementations one has table h would also be required to do reverse mapping


Properties of Adjacency Matrix

Space required : Θ(V*V)
Operations :
    - Check if u and v are adjacent : Θ(1);
    - Find all vertices adjacent to u : Θ(V);
    - Find degree of u : Θ(V);
    - Add/Remove an edge : Θ(1);
    - Add/Remove a vertex : Θ(V*V);
        -> for adding , need to make a matrix with 1 number bigger size and then copy the elements of original matrix to new one.
        Similarly needs to be done for removing a vertex
