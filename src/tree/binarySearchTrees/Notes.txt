- For every node, keys in left side are smaller and keys in right sides are greater
- All keys are typically considered as distinct
- Like linked list its a linked data structure.(Not cache friendly)
- Implemented using TreeMap and TreeSet in java(Self balancing BST)


- Below operations in BST are O(H), hence height matters it will become O(N) for skew trees
    - Insert
    - Delete
    - Search
    - FindCloset
Note : But in case of self BST ==> Operations are O(logn)
Ideally we want to have Balanced BST

- Inorder traversal of BST is always sorted

--------------------------------------
Deletion in BST (after deletion it should still be BST)
- if key to be deleted
    - leaf --> direct delete
    - node with one child --> delete node and fill its position with one child
    - node with two child --> since inorder traversal of BST is sorted. Hence, it would be immediate successor that we will replace(can we immediate predecessor)


------------------------------------------------------
Self balancing BST
- make sure to keep the height as O(logN) so below operations can be done in O(LogN) time
    - search
    - insert
    - delete
    - FindCloset

    Note : Above functions complexities are O(H) where H can go till N

Same set of keys can make different height BSTs

If we know the keys in advance, we can make a perfectly balanced BST.

Pick the middle make it root and do it recursively

How to control if user are providing input(no gurantee of order)

Idea : to do some extra work during inserting and deletion --> ROTATION

ROTATION : is O(1) operation


Self balancing BST Example
    - Red black Tree -> lose in balance hence required less rotations
    - AVL Tree -> Very strict in terms of balance;

In general , Red-black tree is preferred more as compare to AVL Tree. In java, under TreeMap and TreeSet
they use red black Tree


AVL TREE;
---------------
- Self balancing BST(left smaller right greater)
- It is balanced(For every node, difference between left and right heights does not exceeds one)
        Balance factor = |lh-rh| <=1


Note : Only insert or delete operation are different , search is still same as BST

INSERT OPERATION
------------------------
PERFORM normal BST serach.
- Traverse all ancestors(since only ancestors will get affect the balance factor) of the newly inserted node from the node to the root.
- If find an unbalanced node, check for below cases
    - left-left -> single rotation
    - right-right -> single rotation
    - left-right   -> double rotation 
    - right-left -> double rotation

One interesting fact :- about insertion, when we fix the unbalanced ancestor the whole tree will get aVL balanced, meaning only
one rotation is required.
This is not the case with deletion. In deletion, when we delete and fix the unbalanced ancestor we have to traverse again to ancestors to check

TIME COMPLEXITY : O(logN) (to travel to ancestor --> for rotation complexity is O(1))

Height of AVL Tree
- h < clogbase2(n+2)+b
    where, c ~ 1.4405
            b ~ -1.3277


RED BLACK TREE
-----------------
Search is same as BST
AVL tree is very strict , RB is loose as compared to AVL

- Every node is either Red or black
- Root is always black
- No two consecutive Red