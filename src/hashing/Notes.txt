HASHING
----------------
- Used to implement dictionary
- Used to implement sets
- Below operations can be performed in O(1) time
    - Search, Insert and delete
- if we insert same key it will override its entry
    - In hash tables and hashing we always have unique values

Note : Self balancing binary tress - > AVL and Red-black takes O(logn) --> search and delete

- Hashing can't do certain operations (that other DS can do) -> HASHING IS STRICT SEARCH
    - Like finding smaller than the given key - > AVL and Red-black
    - key which is just above - > AVL and Red-black
    - Closest match -> HASHING WILL TAKE O(N)
    - Cannot get the data in sorted order by hashing


NOT USE HASHING :
    - Finding closest match -> AVL and Red-black can do
    - Sorted data  -> AVL and Red-black can do
    - Prefix searching -> TRIE can do



Collision handling
---------------------
- If we know keys in advance, then we can use Perfect hashing(that gurantees NO COLLISION)
- If we don't know the keys, then we use one of the following
    - Chaining
    - Open addressing
        - Linear probing
        - Quadratic Probing
        - Double Hashing

CHAINING
-----------------

Performance :
     m = no of slots in hash table
     n = no of keys to be inserted

     Load factor : n/m , should be less
     Expected chain length : Load factor, 
        Assumption : keys are going to distribute equally likely
    Expected search time : O(1+load factor)
        1 : time for hash function compulation
        loadfator : time to traverse chain
    Expected insert/delete :  O(1+load factor)
NOTE : ASSUMPTION THAT WE HAVE UNIFORM DISTRIBUTION OF KEYS


DATA STRUCTure foR STORING CHAINS
    - Linked list
        - Insert(Need to search for duplicates as hash dont allow duplicates), Delete, and search : O(l)
        - LL is not cache friendly, use extra space for address/reference
    - Dynamic sized arrays(arralist)
        - Same as above but they are cache friendly and dont require extra space to store address
    - Self balancing BST (AVL, Red black)
        - Insert, Delete, and search : O(logl), they are not cache friendly

        where l is chain length



OPEN ADDRESSING
--------------------
No of slots in Hash table >= No of keys to be inserted
Cache friendly --> we are using same array

Linear Probing -> have clustering problem (load factor should be atmost 1)
    hash(key,i) = (hash(key) + i) % m
                    +i : ? --> Like if we not found empty at hash(key) location then we linear search for next available location
                    i) % m : why %m --> to search in circular
                    hash(key) = key%7

How to handle the problem of clustering with linear probing
    1. Quadratic Probing -> have secondary clustering , disadvantage over linear probing : it doesn't find an empty slot even if has empty slot
        hash(key, i) = (h(key) +i^2) %m
        Mathematical proven fact :  
            load factor < 0.5, m is prime then it will be able to find empty slot and it works
        (load factor should be atmost 0.5)
    2. Double Hashing
         hash(key, i) = (hash1(key) +i*hash2(key)) %m


DOUBLE HASHING
-------------------
hash(key, i) = (h1(key) +i*h2(key)) %m (load factor should be atmost 1)
- If h2(key) is relatively prime to m, then it always find a free slot if there is one
- If uniformly distributes key as compare to linear and quadratic probing
- No clustering
Note : Your h2 function should never return zero otherwise it will probe to same location again and again.


PERFOMANCE ANALYSiS OF SEARCH
 Load factor = n/m (should be <=1)

 Assumption : Every probe sequence looks at random location
 (1- load factor) fraction of table is empty
 Expected no. of probes required  = 1/(1-load factor)

load factor = 0.8 --> 80% location is filled
0.2 --> 20% is free -> 20/100-> 1/5 --> we need 5 probes





OPEN ADDRESSING IMPL
-------------------------
1. how we handle -1(slot is available), -2(deleted element slot) if they are present as keys
Library dont store value at index, it store reference.
    For -1, we can check if slot is null then its available
    For -2, library will have dummy node , so when we delete something library will point that node to dummy node




OPEN ADDRESSING VS CHAINING
------------------------------

OPEN ADDRESSING
- Table may become full and resizing becomes mandatory -> COSTLY OPERATION
- Extra care required for clustering
- Cache friendly
- Extra space might be needed to achiever same performance as chaining (Performance for unsuccessful search : 1/(1-loadFactor))


CHAINING
- Hash table never fills
- Less sensitive to hash functions
- Poor cache performance
- Extra space for links (Performance for unsuccessful search : 1+loadFactor)


-> PREFER CHAINING





