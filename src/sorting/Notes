Sorting in Java
-----------------------
In two classes
- Arrays -> normal arrays
    - Arrays of primitive(int, char etc)
        -> Stability doesn't matter and we can use non stable algo like Dual Pivot Quick Sort
    - Arrays of Objects (String , Integer, Students etc)
     -> Stability matters and we should use stable algo like Based on Merge sort adaption of TimSort
    -> subarray sorting present

- Collections --> for collections that implements List interface (ArrayList, LinkedList, Vector)
    -> Stability matters and we should use stable algo like Based on Merge sort adaption of TimSort
    ->subsorting not present

- Comparable, Comparator
    Fact : If result is +ve , swap


Stable Algos
-------------
IBM (Insertion sort, Bubble sort, Merge sort) -> stable
SQH(Selection sort, Quick sort, Heap sort) -> unstable


Selection Sort
----------------
- O(N^2) Algorithm
- Does less memory wirtes compared to QuickSort, MergeSort and Insertion Sort etc. But Cycle sort is optimal in terms of memory writes.
- Basic idea of heap sort
- Not stable
- In place


Insertion Sort
----------------
- O(N^2) worst case
- Inplace and stable
- Used in practice for small arrays
    - TimSort : (TIM) = Insertion Sort + Merge Sort
    - IntroSort : (Quick Intro Of Heap) = HeapSort + QuickSort + InsertionSort



Merge Sort (In general)
---------------
- Divide and Conqur Algorithm (divide, conqur, and merge)
- Stable algorithm
- Not inplace
- TIME COMPLEXITY : Theta(NlogN)
- AUX SPACE : O(N)
- Well suited for linked list, works in O(1) aux space
- used for external sorting
- In general for arrays, QuickSort outperforms.

Note : we also have impl where we can modified impl of Merge sort that dont use extra space or inplace like block sort


Lomuto and Hoares partition
Both Hoare's and Lomuto partitions are in-place, but none of them is stable
IN lomuto partition we are picking the pivot and fixing it place at correct position and left and right were smaller and greater respectively
in Hoares partition we are picking pivot but not gurantee to be at correct position.

This is where lomuto is slightly better.


IN Hores partition , the element from l to j are <= pivot and j+1 to h are >= pivot.
While implementing Quick sort we pass different params while using these algo. 

But in general Hoares partition takes less comparision and practically performs better than lomuto partition


NAIVE : STABLE
LOMUTO AND HOARES : NOT STABLE


--------------------------------------

QUICK SORT
------------------
1. Divide and conqur algorithm
2. worst case complexity : O(N^2)
3. Despite O(N^2) worst case, its consider faster because of the following reasons
    a. In-place (not using any extra space for partition functin (lumuto/ Hoars))
    b. Cache friendly
    c. Average case is O(logN)
    d. Tail recursive(last thing is recursion call , not the case of merge sort)
4. Partition is key function(NAIVE, LOMUTO, AND HOARES)

EFFICIENT : HOARES > LOMUTO AND NAIVE


QUICK SORT IS PREFERRED WHEN STABILITY IS NOT A CONCERN OTHERWISE MERGE SORT IS PREFERRED


BEST CASE and WORST CASE RECURRENCE RELATION

Worst CASE
    T(N) = T(N-1) + Theta(N), //where array divides in two half

BEST Case 
    T(N) = 2T(N/2) + Theta(N), //when array divides like one side has n-1 items

In both the cases, Theta(N) is for partitioning function


SPACE COMPLEXITY : FOR HOARE's AND LOMUTO

WORST CASE : Theta(N), where N is the number of elements
BEST CASE : O(LogN), where N is the number of elements = levels



 CHoice of Pivot and worst case of quicksort
    - We dont want adversary (one who knows our worst case and pass input in that way only)
    - To overcome the worst case
        - we generate pivot from random number from l to h
           pivot =  random(l,h)
            - in case of hoare's partition swap the random pivot with first element(i.e. usually our pivot)
            - in case of lomuto partition swap the random pivot wiht last element(i.e. usually our pivot)

    BY THIS WAY : We don;t have the case where out quicksort always leads to the worst case.

TAIL CALL ELIMINATION
 - FOr both hoares and lomuto partition if the array is sorted(increasing order OR decreasing order) it will lead into worst case

 We can eliminated the last recursive call in quicksort since its tail recursion(not doing anything after the recursion)

//hoare's partition
 void qSort(int arr[], int l, int r){
    if (r>l){
        int p = partition(arr, l, r);
        qSort(arr, l, p);
        qSort(arr, p+1, r)
    }
 }

 CHANGE TO 

  void qSort(int arr[], int l, int r){
    Begin;
    if (r>l){
        int p = partition(arr, l, r);
        qSort(arr, l, p);
        l = p+1
        goto Begin;
    }
 }

 Notes : do tail call elimination for the part that has larger elements since(order of recusive call doesn't matter)
    quickSort(arr, p+1, h);
    quickSort(arr, l , p);

    quickSort(arr, l , p);
    quickSort(arr, p+1, h);


Cycle SORT
-------------------

A worst case is O(N^2) sorting algorithm
Does minimum memory writes and can be useful for cases where memory writes is costly
In place and not stable
Useful to solve question like find minimum swaps required to sort an array 



COUNTING SORT
------------------
TIME COMPLEXITY : O(N+K), good until k is linear(proportional to N), if it become N^2 then it will perform worse then standard sorting algos

so we have now Radix sort


Radix Sort
----------------
can do the sorting under linear time
